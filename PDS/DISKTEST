DISK      TITLE '*** DISKTEST, V01, 01/27/81, H.G. NG ***'
*         (1)  EXERCISE DASD WITH BSAM WRITE'S AND READ'S
*         (2)  ISSUE STIMER WITH TASK, WILL AUTOMATICALLY CANCEL
*              CURRENT TASK.
*         (3)  ISSUE WRITES OR READS, THEN A STIMER WAIT OF 1 MS
*              BEFORE ANOTHER WRITE OR READ.  THEREFORE WILL NOT
*              OVERLOAD CHANNEL DOING TEST I/O.
           SPACE 2
*  DISKTEST RETURN CODES:
*  00 --> TTIMER CANCELED, AND NORMAL RETURN.
           SPACE 2
*  DISKTEST ABEND CODES
*  ABEND 01 --> FILE OUT, BAD OPEN FOR OUTPUT
*  ABEND 02 --> FILE IN,  BAD OPEN FOR INPUT
*  ABEND 98 --> FILE OUT, SYNAD I/O ERROR
*  ABEND 10 --> STIMER CANCELED SUBROUTINE DISK.
         EJECT
*  PARM PASSED IN -
         SPACE 2
*  ON EXEC CARD -->
*  //SSS EXEC PGM=DISKTEST,
*  //    PARM='TIME=00300000,MSGS=YES,UNIT=3350,VOL=VVVVVV'
*
*    1.  THESE ARE THE PARMS PASSED TO DISKTEST FOR DASD BSAM I/O
*        FOR TESTS ON PACKS WITH PROBLEMS OR TO BURN IN BEFORE
*        USING PACKS FOR REAL WORK.
*
*    2.  DEFINITIONS -
*
*        A.  TIME=HHMMSSTH, TIME-LIMIT OF BSAM I/O TASK.  THE TASK
*            WILL AUTOMATICALLY CANCEL ITSELF AT THIS TIME LIMIT.
*            THE DEFAULT IS 4 HOURS.
*
*        B.  MSGS=YES/NO, THERE ARE WTO AND SYSPRINT MESSAGES
*            INDICATING THE START, END, AND THE NUMBER OF RECORDS
*            WRITTEN OR READ.  IF YOU WISH TO SUPPRESS THESE
*            MESSAGES, THEN 'MSGS=NO'. THE DEFAULT IS YES.
*
*        C.  UNIT=2305-2/3330/3330-1/3350/3380.  THIS IS THE UNIT
*            PARAMETER FOR THE MESSAGES.  THE DEFAULT IS 3350.
*
*        D.  VOL=VVVVVV.  THIS IS THE VOLSER REFERENCE FOR THE
*            MESSAGES.  THE DEFAULT IS VVVVVV.
*
*        E.  YOU MUST ALLOCATE IN PRIMARY CYL SPACE.
*
*            2305-2, 96  CYLINDERS PER VOLUME
*            3330,   404 CYLINDERS PER VOLUME
*            3330-1  808 CYLINDERS PER VOLUME
*            3350,   555 CYLINDERS PER VOLUME
*            3380,   885 CYLINDERS PER VOLUME
*
*
*
*
*
*
*
         EJECT
DISKTEST CSECT
         SPACE 2
R00      EQU   00
R01      EQU   01
R02      EQU   02
R03      EQU   03
R04      EQU   04
R05      EQU   05
R06      EQU   06
R07      EQU   07
R08      EQU   08
R09      EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         EJECT
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING DISKTEST,R12
         LA    R15,SA1
         ST    R15,8(,R13)          LSA IN HSA+8
         ST    R13,4(,R15)          HSA IN LSA+4
         LR    R13,R15              SET SA FOR CALLS
         EJECT
*        GET GO STEP EXEC PARM
         SPACE 1
         LA    R11,1                    R11=F'1'
         SPACE 1
         L     R01,0(,R01)              POINT TO PARM
         LH    R04,0(,R01)        R04 = GET LEN OF STRING
         LA    R03,2(,R01)        R03 = ADDRESS OF STRING
         SR    R04,R11                  EXEC LEN OF STRING
         SPACE 2
*        PARM  SCAN
PARMLOOP DS    0H
         LTR   R04,R04                  ANY PARM LEFT ?
         BNP   DONEP                    GO TO DONE PARSING
         SPACE 1
*        FIND  KEYWORD FIRST
         XR    R01,R01            R01 = ADR OF '=',CLEAR IT FIRST
         MVI   TRTTAB+C',',0            DO NOT STOP ON ','
         MVI   TRTTAB+C'=',1                   STOP ON '='
         EX    R04,TRT                  GO FIND '='
         BZ    $SYNTAX                  HAS TO BE ONE
         LA    R05,1(,R01)        R05 = A OF '=' +1
         SR    R01,R03            R01 = LEN OF KEYWORD
         BNP   $SYNTAX                  MUST BE AT LEAST ONE BYTE
         CH    R01,=H'7'                LONGEST THAN LONGEST ?
         BNH   *+8
         LH    R01,=H'7'                TRUNCATE IT
         SR    R01,R11            R01 = EXEC LEN OF KEYWORD
         EJECT
*        CHECK  LNKLST CHANIN FOR VALID  KEYWORDS FOR MATCH
         SPACE 1
         L     R06,HEAD                 GET FIRST IN CHAIN
         USING ENTRY,R06                DSECT MAPPING
         XR    R15,R15            R15 = MATCH ADDRESS
         SPACE 2
MATCHLP  DS    0H
         XR    R00,R00                  CLEAR FOR IC
         IC    R00,ENTEXLEN       R00 = EXEC LEN OF ENTRY
         CR    R01,R00            R01 = EXEC LEN OF KEYWORD IN PARM
         BH    MATCHNXT                 SKIP THIS ENTRY
         EX    R01,CLC                  NO, IS IT A MATCH
         BNE   MATCHNXT                 NO, NEXT ENTRY
         BXH   R15,R15,$AMBIG           YES, HAVE MATCH ALREADY
         LR    R15,R06            R15 = KEEP ENTRY ADDRESS
         SPACE 1
MATCHNXT DS    0H
         L     R06,ENTLINK        R06 = NEXT ENTRY IN LINKLST
         LTR   R06,R06                  IS IT LAST ENTRY
         BNZ   MATCHLP                  CONTINUE DOWN CHAIN
         LTR   R15,R15                  ANY MATCH ?
         BZ    $SYNTAX                  NO, INVALID SYNTAX
         EJECT
*        PARSE  OUT THE KEYWORD VALUE
         SPACE 2
         LR    R00,R03            R00 = KEEP BEGIN OF KEYWORD
         LR    R03,R05            R03 = POINT TO VALUE
         SR    R05,R00                  LEN OF KEYWORD
         SPACE 1
         SR    R04,R05                  LESS PARM, LEFT NOW
         BM    DONEP
         LR    R06,R15            R06 = ADR OF ENTRY WHICH MATCHED
         SPACE 1
         MVI   TRTTAB+C'=',0            DO NOT STOP ON '='
         MVI   TRTTAB+C',',1                   STOP ON ','
         LA    R01,1(R03,R04)     R01 = LOC AFTER ','
*                                       ASSUME FAKE ',' AT END OF
*                                       PARM
         EX    R04,TRT                  FIND A ','
         LA    R05,1(,R01)        R05 = PAST ',' OR FAKE ','
         SR    R01,R03            R01 = LEN OF VALUE
         CH    R01,=H'15'               VALUE TOO LONG ?
         BH    $SYNTAX
         SR    R01,R11            R01 =  EXEC LEN OF VALUE
         BM    PARMNEXT                 NO VALUE, GO TO NEXT KEYWD
         CH    R01,=H'15'               VALUE TOO LONG ?
         BH    $SYNTAX
         SPACE 2
         STC   R01,ENTLEN               LEN OF VALUE
         EX    R01,MVEVALUE
         EJECT
PARMNEXT DS    0H
         LR    R00,R03                  KEEP BEGIN OF VALUE
         LR    R03,R05                  NEXT KEYWORD AFTER ','
         SR    R05,R00          R05 =   LEN OF VALUE + ','
         SR    R04,R05          R04 =   LESS PARM NOW, LEN OF PARM
         B     PARMLOOP
         SPACE 2
DONEP    DS    0H                       PRINT KEYS AND VALUES
         SPACE 1
         OPEN  (SYSPRNT1,OUTPUT)        OPEN SYSPRINT FILE
         SPACE 1
         L     R06,HEAD
         LA    R02,LINE1
         SPACE 2
PRINTLP  DS    0H
         MVI   LINE1,X'40'              CLEAR IT
         MVC   LINE1+1(131),LINE1
         SPACE 1
         IC    R15,ENTEXLEN
         EX    R15,MVCL1
         IC    R15,ENTLEN
         EX    R15,MVCL2
         SPACE 1
         PUT   SYSPRNT1,LINE1
         SPACE 1
         L     R06,ENTLINK              NEXT ENTRY IN CHAIN
         LTR   R06,R06                  ANY LEFT ?
         BNZ   PRINTLP
         SPACE 2
*        EJECT THE PAGE
         SPACE 1
         MVI   LINE1,X'40'
         MVC   LINE1+1(131),LINE1
         MVI   LINE1,C'1'
         PUT   SYSPRNT1,LINE1
         SPACE 1
         B     GETDISKA
         EJECT
*        SYNTAX ERROR
         SPACE 1
$SYNTAX  MVC   LINE1+1(17),=C'SYNTAX ERROR NEAR'
$ERROR   MVC   LINE1+31(50),0(R03)
         PUT   SYSPRNT1,LINE1
         SPACE 1
         B     GOBACK
         SPACE 2
*        AMBIGUITY
         SPACE 1
$AMBIG   MVC   LINE1+1(22),=C'AMBIGUOUS KEYWORD NEAR'
         B     $ERROR
         EJECT
GETDISKA DS    0H
         SPACE 1
         BAL   R14,PRINTH               PRINT HEADINGS
         SPACE 1
         LA    R01,HEAD                 PASS TO DISK
         L     R15,=V(DISK)
         SPACE 2
*        ISSUE STIMER FOR TASK, WILL CANCEL AFTER TIMED
*        TASK OPRATIVE, TIMER DECREMENTED ONLY WHEN SUBROUTINE IS
*        EXECUTING
*
         BAL   R14,MAXTIME
         SPACE 2
         BALR  R14,R15                  GO DO WRITE AND READ IN SUBR
         EJECT
*
*        IF BY CHANCE IT RETURNS AT ALL, CANCEL STIMER
*        SHOULD NEVER RETURN
         SPACE 2
EXIT00   DS    0H
         TTIMER CANCEL
         SPACE 2
         MVC   AMSG2+11(8),=CL8'ENDING  '
         BAL   R14,PRINTH               PRINT END HEADINGS
         SPACE 1
         CLOSE (SYSPRNT1)
         SPACE 1
GOBACK   DS    0H
         L     R13,SA1+4                WITHIN TIME LIMIT,IF EVER
         RETURN (14,12),RC=00           RETURN
         EJECT
MAXTIME  DS    0H
         STM   R14,R12,12(R13)
         LA    R15,SAMAX
         ST    R15,8(,R13)              LSA IN HSA+8
         ST    R13,4(,R15)              HSA IN LSA+4
         LR    R13,R15                  SET SA FOR CALLS
         SPACE 1
         MVC   TIMED(8),TIME+5          GET TIME
         SPACE 2
         STIMER TASK,EXIT10,DINTVL=TIMED
         SPACE 2
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
PRINTH   DS    0H                       PRINT HEADINGS
         STM   R14,R12,12(R13)
         LA    R15,SAPRTH
         ST    R15,8(,R13)
         ST    R13,4(,R15)
         LR    R13,R15
         SPACE 2
         TIME  DEC,ZONE=LT
         ST    R00,TIMEA
         ST    R01,DATEA
         UNPK  AMSG3+11(7),TIMEA
         OI    AMSG3+17,X'F0'
         UNPK  AMSG3+22(5),DATEA
         OI    AMSG3+26,X'F0'
         SPACE 1
         MVC   AMSG4+19(6),VOL+5
         MVC   AMSG4+32(6),UNIT+5
         MVI   LINE1,X'40'
         SPACE 1
         LA    R02,5                    PRINT 5 LINES
         LA    R03,AMSG1                FIRST LINE
PRINTL   DS    0H
         MVC   LINE1+1(45),0(R03)
         PUT   SYSPRNT1,LINE1
         SPACE 1
******   MESSAGE TO OPERATOR   *************************************
         MVC   *+14(45),0(R03)
         WTO   '012345678901234567890123456789012345678901234',        C
               ROUTCDE=(2),DESC=(6)
********************************************************************
         SPACE 1
         LA    R03,45(R03)              NEXT LINE
         BCT   R02,PRINTL
         SPACE 1
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
SYSPRNT1 DCB   DDNAME=SYSPRNT1,DSORG=PS,RECFM=FBA,                     C
               MACRF=PM,BLKSIZE=132,LRECL=132
         EJECT
*        CONSTANTS FOR DISKTEST
         SPACE 2
SA1      DC    18F'0'
SAMAX    DC    18F'0'
SAPRTH   DC    18F'0'
TIMEA    DC    F'0'
DATEA    DC    F'0'
TIMED    DC    D'0'
         SPACE 2
TRTTAB   DC    256X'00'                 FIND ',' OR '='
LINE1    DC    132XL1'40'
         EJECT
*        MESSAGES
AMSG1    DC    45CL1'*'
AMSG2    DC    CL45'****       STARTING R/W IO TEST          ****'
AMSG3    DC    CL45'****       HHMMSST    YYDDD              ****'
AMSG4    DC    CL45'****       VOLUME: VVVVVV TYPE: XXXX     ****'
AMSG5    DC    45CL1'*'
         EJECT
****                                    <<< BEGIN EXECUTES >>>
TRT      TRT   0(0,R03),TRTTAB          FIND ',' OR '='
CLC      CLC   0(0,R03),ENTKEY
MVEVALUE MVC   5(0,R06),0(R03)
MVCL1    MVC   1(0,R02),ENTKEY
MVCL2    MVC   15(0,R02),ENTVAL
****                                    <<< END EXECUTES >>>
         SPACE 2
         DROP  R06                      DON'T NEED IT AFTER THIS
         EJECT
         LTORG
         EJECT
***      STIMER EXIT FOR WATCHDOG TIMER
***      INPUT REGISTERS ARE NOT SAVED IN OS-PROVIDED SA (R13)
***      SINCE WE ARE ABOUT TO ABEND
***
***      R00-R12  = ?
***      R13      = A USEABLE SAVEAREA
***      R14      = RETURN ADDRESS
***      R15      = EXIT EPA A(EXIT10)
         SPACE 2
EXIT10   DS    0H                       STIMER CANCELED TASK IN
         LR    R12,R15
         SPACE 1
         DROP  R12                      GET RID OF MAIN BASE
         SPACE 1
         USING EXIT10,R12
         SPACE 1
         ABEND 10                       USER ABEND CODE, NO DUMP
         SPACE 1
         DROP  R12                      NO MORE EXIT10 BASE
         EJECT
*        LINKED LIST
         SPACE 1
HEAD     DC    A(TIME)
TIME     DC    A(MSGS)
         DC    AL1(7),CL15'00300000       '     DEFAULT HHMMSSTH
         DC    AL1(3),C'TIME'
MSGS     DC    A(UNIT)
         DC    AL1(2),CL15'YES            '     DEFAULT PRINT MSGS
         DC    AL1(3),C'MSGS'
UNIT     DC    A(VOL)
         DC    AL1(3),CL15'3350           '     DEFAULT 3350 DRIVES
         DC    AL1(3),C'UNIT'
VOL      DC    A(0)
         DC    AL1(5),CL15'VVVVVV         '     DEFAULT VOLSER
         DC    AL1(2),C'VOL'
         SPACE 2
ENTRY    DSECT
ENTLINK  DS    A                                ADR OF NEXT LINK
ENTLEN   DS    X                                LEN OF DEFAULT ENTRY
ENTVAL   DS    15X                              VALUE
ENTEXLEN DS    X                                EXEC LEN OF KEYWORD
ENTKEY   DS    0C                               KEYWORD
         EJECT
         TITLE '*** DISK, V01, 01/27/81, H.G. NG ***'
DISK     CSECT
         STM   R14,R12,12(R13)
         LR    R12,R15
         USING DISK,R12,R11,R10
         LA    R15,SA2
         ST    R15,8(,R13)              LSA IN HSA+8
         ST    R13,4(,R15)              HSA IN LSA+4
         LR    R13,R15                  SET SA FOR CALLS
         SPACE 2
         LA    R11,4095(R12)            * INCREASE ADDRESSABILITY *
         LA    R11,1(R11)               C(R11)= 4096+C(R12)
         LA    R10,4095(R11)
         LA    R10,1(R10)               C(R10)= 4096+C(R11)
         SPACE 2
         ST    R01,HEADAD               KEEP HEADADDR FROM PARSING
         SPACE 2
         OPEN  (SYSPRNT2,OUTPUT)
         EJECT
*    1.  GET JFCB INFO --> CYL/TRK, IF CYL CONVERT TO TRK
*    2.  BYTES      1 RECORD                    RECORDS
*        -----  *   --------       ======>>>    -------
*         TRK       2600 BYTES                    TRK
*
*    3.  TRK    *   RECORDS
*                   -------  ======>>>    RECORDS (NO. TO WRITE)
*                     TRK
         SPACE 2
         LA    R08,JFCBAREA             SET DSECT MAPPING OF
         USING JFCBFLDS,R08             RDJFCB AREA
         SPACE 2
         OPEN  (OUT,OUTPUT)             OPEN GETS JFCB
         SPACE 1
         RDJFCB OUT                     GET PQTY OR CYL/TRK
         SPACE 1
         CLOSE (OUT)
         SPACE 1
         MVI   EXLSTAD,X'80'            CANCEL RDJFCB FOR NEXT OPEN
         EJECT
*        DETERMINE CYL OR TRK
         SPACE 2
         TM    JFCBCTRI,X'C0'           CYL ALLOCATION ?
         BNO   TRKCALC
CYLCALC  DS    0H                       ITS IN CYLINDER ALLOC
         SPACE 2
*        GET UNIT FROM PARM PARSED IN
         L     R01,HEADAD               RESTORE LINKLIST ADR
GETLINK  DS    0H
         L     R01,0(,R01)              GET LINK ADR
         LTR   R01,R01                  IS IT 0 ?
         BZ    FIXUNIT                  DIDN'T FIND IT, USE DEFAULT
         CLC   21(4,R01),=C'UNIT'
         BE    GETUNIT
         B     GETLINK
         SPACE 1
FIXUNIT  DS    0H
         MVC   UNITX(4),=C'3350'
         B     CAL3350C
         SPACE 1
GETUNIT  DS    0H
         MVC   UNITX(6),5(R01)
         SPACE 2
         CLC   UNITX(6),=C'2305-2'
         BE    CAL2305C
         CLC   UNITX(6),=C'3330  '
         BE    CAL3330C
         CLC   UNITX(6),=C'3330-1'      MOD 11 DISK?        *HMD 02/81*
         BE    CAL3331C                 YES, CALCULATE      *HMD 02/81*
         CLC   UNITX(6),=C'3350  '
         BE    CAL3350C
         CLC   UNITX(6),=C'3380  '
         BE    CAL3380C
         B     FIXUNIT                  ELSE, FIX WITH 3350 DEFAULT
         EJECT
*        PRIMARY CYLINDER ALLOCATION, CONVERT TO TRKS
         SPACE 2
CAL2305C DS    0H
         L     R07,D2305+4              TRKS/CYL
         L     R05,D2305                BYTES/TRK
         BAL   R06,CALCTRKS
         B     CALREC
CAL3330C DS    0H
         L     R07,D3330+4              TRKS/CYL
         L     R05,D3330                BYTES/TRK
         BAL   R06,CALCTRKS
         B     CALREC
CAL3331C DS    0H                       3330-11 SUPPORT     *HMD 02/81*
         L     R07,D3331+4              TRKS/CYL            *HMD 02/81*
         L     R05,D3331                BYTES/TRK           *HMD 02/81*
         BAL   R06,CALCTRKS                                 *HMD 02/81*
         B     CALREC                                       *HMD 02/81*
CAL3350C DS    0H
         L     R07,D3350+4              TRKS/CYL
         L     R05,D3350                BYTES/TRK
         BAL   R06,CALCTRKS
         B     CALREC
CAL3380C DS    0H
         L     R07,D3380+4              TRKS/CYL
         L     R05,D3380                BYTES/TRK
         BAL   R06,CALCTRKS
         B     CALREC
         SPACE 2
TRKCALC  DS    0H                       ITS IN CYLINDER ALLOC
         SPACE 1
*        GET UNIT FROM PARM PARSED IN
         L     R01,HEADAD               RESTORE LINKLIST ADR
TETLINK  DS    0H
         L     R01,0(,R01)              GET LINK ADR
         LTR   R01,R01                  IS IT 0 ?
         BZ    TIXUNIT                  DIDN'T FIND IT, USE DEFAULT
         CLC   21(4,R01),=C'UNIT'
         BE    TETUNIT
         B     TETLINK
TIXUNIT  DS    0H
         MVC   UNITX(4),=C'3350'
         B     CAL3350T
TETUNIT  DS    0H
         MVC   UNITX(6),5(R01)
         SPACE 2
         CLC   UNITX(6),=C'2305-2'
         BE    CAL2305T
         CLC   UNITX(6),=C'3330  '
         BE    CAL3330T
         CLC   UNITX(6),=C'3330-1'                          *HMD 02/81*
         BE    CAL3331T                                     *HMD 02/81*
         CLC   UNITX(6),=C'3350  '
         BE    CAL3350T
         CLC   UNITX(6),=C'3380  '
         BE    CAL3380T
         B     TIXUNIT                  ELSE, FIX WITH 3350 DEFAULT
         EJECT
CAL2305T DS    0H
         MVC   TRKS+1(3),JFCBPQTY
         L     R05,D2305                BYTES/TRK
         BAL   R06,CALCRECS
         B     CALREC
CAL3330T DS    0H
         MVC   TRKS+1(3),JFCBPQTY
         L     R05,D3330                BYTES/TRK
         BAL   R06,CALCRECS
         B     CALREC
CAL3331T DS    0H                                           *HMD 02/81*
         MVC   TRKS+1(3),JFCBPQTY                           *HMD 02/81*
         L     R05,D3331                BYTES/TRK           *HMD 02/81*
         BAL   R06,CALCRECS                                 *HMD 02/81*
         B     CALREC                                       *HMD 02/81*
CAL3350T DS    0H
         MVC   TRKS+1(3),JFCBPQTY
         L     R05,D3350                BYTES/TRK
         BAL   R06,CALCRECS
         B     CALREC
CAL3380T DS    0H
         MVC   TRKS+1(3),JFCBPQTY
         L     R05,D3380                BYTES/TRK
         BAL   R06,CALCRECS
         EJECT
CALREC   DS    0H                       RECS=RECS/TRK * TRK
         XR    R02,R02
         L     R03,RECTRK
         M     R02,TRKS
         ST    R03,RECORDS
         B     GETMSG
         EJECT
CALCTRKS DS    0H
         MVC   PQTY+1(3),JFCBPQTY       PRIMARY CYL ALLOC
         XR    R02,R02
         XR    R03,R03
         L     R03,PQTY                 CYL
         MR    R02,R07                  TRKS=CYL*TRKS/CYL
         ST    R03,TRKS                 TRKS
CALCRECS DS    0H                       NO. OF RECORDS/TRK
         XR    R04,R04                  R05= BYTES/TRK
         D     R04,=F'2600'             REC/TRK= (BYTES/TRK) *
*                                                (1 RECORD/2600 BYTES)
         ST    R05,RECTRK               COUNTER FOR NO. OF WRITES
         BR    R06                      RETURN
         EJECT
*        GET MSG FLG, DETERMINE IF MSGS='YES'
         SPACE 1
GETMSG   DS    0H
         SPACE 1
         L     R01,HEADAD
GETMSGX  DS    0H
         L     R01,0(,R01)              GET LINK ADR
         LTR   R01,R01
         BZ    FIXMSG
         CLC   21(4,R01),=C'MSGS'
         BE    MVEMSG
         B     GETMSGX
FIXMSG   DS    0H
         MVI   MSGFLG+3,X'01'           SET TO PRINT MESSAGES
         B     LOADBLKO
MVEMSG   DS    0H
         CLC   5(3,R01),=C'YES'
         BE    FIXMSG
         MVI   MSGFLG+3,X'00'           DO NOT PRINT MESSAGES
         SPACE 2
LOADBLKO DS    0H
*        LOAD BLKO WITH CHARS BEFORE WRITE, ONE TIME ONLY
         LA    R02,BLKO
         LA    R03,100
MOVE     DS    0H                       LOAD BLK TO WRITE CHARS
         MVC   0(26,R02),ALPHA          100 * 26 --> 2600 BYTES
         LA    R02,26(R02)
         BCT   R03,MOVE
         SPACE 2
*        CONVERT VALUE OF RECORDS TO MESSAGES
         L     R02,RECORDS
         CVD   R02,WORK
         MVC   MSGWRT3+22(20),RECMASK
         MVC   MSGRD3+22(20),RECMASK
         ED    MSGWRT3+22(20),WORK
         ED    MSGRD3+22(20),WORK
         SPACE 2
*        MOVE  UNIT TO MESSAGES
         MVC   MSGWRT1+22(6),UNITX
         MVC   MSGWRT2+22(6),UNITX
         MVC   MSGRD1+22(6),UNITX
         MVC   MSGRD2+22(6),UNITX
         EJECT
*        MOVE VOLSER TO MESSAGES FROM JFCB
         SPACE 1
         MVC   MSGWRT1+15(6),JFCBVOLS
         MVC   MSGWRT2+15(6),JFCBVOLS
         MVC   MSGRD1+15(6),JFCBVOLS
         MVC   MSGRD2+15(6),JFCBVOLS
         SPACE 2
         DROP  R08                     FORGET ABOUT JFCB NOW
         EJECT
*        MAIN I/O PROCESSING LOOP OF PROGRAM
         SPACE 2
DOWRITE  DS    0H
         SPACE 2
         BAL   R14,OPENOUT
         SPACE 2
         BAL   R14,OPENIN
         SPACE 2
         B     DOWRITE                 GO DO IT AGAIN, UNTIL
*                                      STIMER TASK INTERRUPTS
*        SHOULD NEVER RETURN, BUT HERE IT IS ANYWAY
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
OPENOUT  DS    0H
         SPACE 1
         STM   R14,R12,12(R13)
         LA    R15,SAOUT
         ST    R15,8(,R13)            LSA IN HSA+8
         ST    R13,4(,R15)            HSA IN LSA+4
         LR    R13,R15                SET SAOUT FOR CALLS
         SPACE 1
         OPEN  (OUT,OUTPUT)
         SPACE 2
         TM    OUT+48,X'10'
         BNO   ABEND01                  BAD OPEN
         EJECT
LOADR02  DS    0H
         L     R05,RECORDS              NO. OF RECORDS TO WRITE
         SPACE 2
*        DETERMINE IF PRINT MESSAGES
         SPACE 1
         L     R03,MSGFLG
         LTR   R03,R03
         BZ    WRITE
         SPACE 2
         LA    R02,1                    ONE MESSAGE ONLY
         LA    R04,MSGWRT1              PRINT THIS GUY
         BAL   R14,LASTLINE
         EJECT
WRITE    DS    0H
*
         WRITE DECBO,SF,OUT,BLKO,'S'
         SPACE 1
         CHECK DECBO
         SPACE 1
         STIMER WAIT,BINTVL=TIME10
         BCT   R05,WRITE
         SPACE 2
         EJECT
CLOSEOUT DS    0H
         CLOSE (OUT)
         SPACE 2
*        DETERMINE IF PRINT MESSAGES
         SPACE 1
         L     R03,MSGFLG
         LTR   R03,R03
         BZ    OUTRET
         SPACE 1
         LA    R02,2                    2 MESSAGES
         LA    R04,MSGWRT2              BEGINNING MESSAGE
         BAL   R14,LASTLINE
         SPACE 1
         BAL   R14,SPACE2
         SPACE 2
OUTRET   DS    0H
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
OPENIN   DS    0H
         SPACE 1
         STM   R14,R12,12(R13)
         LA    R15,SAIN
         ST    R15,8(,R13)            LSA IN HSA+8
         ST    R13,4(,R15)            HSA IN LSA+4
         LR    R13,R15
         SPACE 1
         OPEN  (OUT,INPUT)
         SPACE 2
         TM    OUT+48,X'10'
         BNO   ABEND02                  BAD OPEN
         SPACE 2
         EJECT
*        DETERMINE IF PRINT MESSAGES
         SPACE 1
         L     R03,MSGFLG
         LTR   R03,R03
         BZ    LOADR02X
         SPACE 1
         LA    R02,1                    PRINT 1 MESSAGE
         LA    R04,MSGRD1               LOCATION OF MESSAGE
         BAL   R14,LASTLINE
         EJECT
LOADR02X DS    0H
         LA    R02,10
READ     DS    0H
*
*        LOAD BLKI WITH 'Z'
         LA    R03,100
         LA    R05,BLKI
ZBLKI    DS    0H
         MVC   0(26,R05),=26C'Z'
         LA    R05,26(R05)
         BCT   R03,ZBLKI
         SPACE 2
         READ  DECBI,SF,OUT,BLKI,'S'
         SPACE 2
         CHECK DECBI
         SPACE 1
*        CHECK IF GOOD READS
         LA    R03,100
         LA    R05,BLKI
CLCBLKI  DS    0H
         CLC   0(26,R05),ALPHA
         BNE   MSGNE                 READS NOT =, PUT OUT MSG
         LA    R05,26(R05)
         BCT   R03,CLCBLKI
         B     STIMEIT
MSGNE    DS    0H
         LA    R04,MSGRDNE
         BAL   R14,LASTLINE
         SPACE 2
STIMEIT  DS    0H
         STIMER WAIT,BINTVL=TIME10
         BCT   R02,READ
         B     LOADR02X
         EJECT
CLOSEIN  DS    0H
         CLOSE (OUT)
*        DETERMINE IF PRINT MESSAGES
         SPACE 1
         L     R03,MSGFLG
         LTR   R03,R03
         BZ    INRET
         SPACE 1
         LA    R02,2
         LA    R04,MSGRD2
         BAL   R14,LASTLINE
         SPACE 1
         BAL   R14,SPACE2
         SPACE 2
INRET    DS    0H
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
WTO      DS    0H
         STM   R14,R12,12(R13)
         LA    R15,SAWTO
         ST    R15,8(,R13)
         ST    R13,4(,R15)
         LR    R13,R15
         SPACE 1
******************************************************************
         MVC   *+16(45),0(R04)
         WTO   '012345678901234567890123456789012345678901234',        C
               ROUTCDE=(2),DESC=(6)
******************************************************************
         SPACE 1
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
LASTLINE DS    0H
         STM   R14,R12,12(R13)
         LA    R15,SALASTP
         ST    R15,8(,R13)
         ST    R13,4(,R15)
         LR    R13,R15
         SPACE 1
         TIME  DEC,ZONE=LT
         SPACE 1
         ST    R01,DATEEBC
         ST    R00,TIMEEBC
         UNPK  0(5,R04),DATEEBC
         UNPK  6(7,R04),TIMEEBC
         OI    4(R04),X'F0'
         OI    12(R04),X'F0'
         SPACE 2
OUTP     DS    0H
         MVC   LINE2+1(45),0(R04)
         PUT   SYSPRNT2,LINE2
         SPACE 1
         BAL   R14,WTO
         SPACE 1
         LA    R04,45(R04)
         BCT   R02,OUTP
         SPACE 1
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
SPACE2   DS    0H
         STM   R14,R12,12(R13)
         LA    R15,SASPACE2
         ST    R15,8(,R13)
         ST    R13,4(,R15)
         LR    R13,R15
         SPACE 1
         MVI   LINE2,C'0'
         MVI   LINE2+1,X'40'
         MVC   LINE2+2(130),LINE2+1
         PUT   SYSPRNT2,LINE2
         SPACE 1
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         BR    R14
         EJECT
ABEND01  ABEND 01,DUMP                  FILE OUT- BAD OPEN FOR OUTPUT
         SPACE 2
ABEND02  ABEND 02,DUMP                  FILE OUT- BAD OPEN FOR INPUT
         SPACE 2
ABEND98  ABEND 98,DUMP                  SYNAD - I/O ERROR - OUT
         EJECT
SA2      DC    18F'0'
SAOUT    DC    18F'0'
SAIN     DC    18F'0'
SAWTO    DC    18F'0'
SALASTP  DC    18F'0'
SASPACE2 DC    18F'0'
RECMASK  DC    XL20'402020206B2020206B2020206B2020206B212020'
BLKO     DC    100XL26'E9'              100 * 26 = 2600 BYTES
BLKI     DC    100XL26'E9'              100 * 26 = 2600 BYTES
ALPHA    DC    C'ABCDEFGHIJKLM'
         DC    C'NOPQRSTUVWXYZ'
LINE2    DC    132X'40'
TIME10   DC    F'1'                     1 MS
         SPACE 2
*        EXLST
EXLSTAD  DS    0F
         DC    X'87',AL3(JFCBAREA)      EXLST FOR JFCB
         SPACE 2
HEADAD   DC    A(0)
UNITX    DC    6CL1' '
PQTY     DC    F'0'
TRKS     DC    F'0'
RECTRK   DC    F'0'                    RECS/TRK
RECORDS  DC    F'0'
MSGFLG   DC    F'0'
WORK     DC    D'0'
TIMEEBC  DC    F'0'
DATEEBC  DC    F'0'
         EJECT
*        DISK  CHARACTERISTICS
*        (BYTES/TRK),(TRKS/CYL),TRKS,CYL
D2305    DC    F'14660',F'8',F'768',F'96'
         SPACE 1
D3330    DC    F'13030',F'19',F'7676',F'404'
         SPACE 1
D3331    DC    F'13030',F'19',F'15352',F'808'               *HMD 02/81*
         SPACE 1
D3350    DC    F'19069',F'30',F'16650',F'555'
         SPACE 1
D3380    DC    F'32768',F'15',F'13275',F'885'
         EJECT
*        MESSAGES
         SPACE 1
MSGWRT1  DC    CL45'YYDDD HHMMSST  VVVVVV UUUU   START WRITE I/O '
MSGWRT2  DC    CL45'YYDDD HHMMSST  VVVVVV UUUU   END   WRITE I/O '
MSGWRT3  DC    CL45'NO. OF RECORDS WRITTEN                       '
         SPACE 2
MSGRD1   DC    CL45'YYDDD HHMMSST  VVVVVV UUUU   START READ  I/O '
MSGRD2   DC    CL45'YYDDD HHMMSST  VVVVVV UUUU   END   READ  I/O '
MSGRD3   DC    CL45'NO. OF RECORDS READ                          '
         SPACE 2
MSGRDNE  DC    CL45'YYDDD HHMMSST  VVVVVV UUUU   ** BAD READS ** '
         EJECT
         LTORG
         EJECT
*        BSAM  OUT AND IN DCB'S
         SPACE 2
OUT      DCB   DSORG=PS,MACRF=(R,W),DDNAME=OUT,                        C
               RECFM=F,LRECL=2600,EODAD=CLOSEIN,                       C
               SYNAD=ABEND98,EXLST=EXLSTAD
         EJECT
*IN      DCB   DSORG=PS,MACRF=(R),DDNAME=IN,                         C
*              RECFM=F,LRECL=2600,                                   C
*              SYNAD=ABEND99,EODAD=CLOSEIN
         SPACE 2
SYSPRNT2 DCB   DDNAME=SYSPRNT2,DSORG=PS,RECFM=FBA,                     C
               MACRF=PM,BLKSIZE=132,LRECL=132
         EJECT
JFCBAREA DS    0D,176X
         EJECT
JFCBFLDS DSECT
         IEFJFCBN LIST=YES
         EJECT
         END
